########################################################################
## Calculates the Jacobian of the output dynamics equation 
########################################################################
import numpy as np

def kf_calc_Hx(t, x, u):
    

    Hx          = np.zeros([3, 4])
    Hx[0, 0]    = (x[3]+1)*x[2]/(x[0]**2 + x[2]**2)
    Hx[0, 2]    = (x[3]+1)*x[0]/(x[0]**2 + x[2]**2)
    Hx[0, 3]    = np.arctan(x[2]/x[0])
    Hx[1, 0]    = -x[0]*x[1]/(np.sqrt(x[0]**2 + x[2]**2)*(x[0]**2 +x[1]**2 + x[2]**2))
    Hx[1, 1]    = np.sqrt(x[0]**2 + x[2]**2)/(x[0]**2 +x[1]**2 + x[2]**2)
    Hx[1, 2]    = -x[1]*x[2]/(np.sqrt(x[0]**2 + x[2]**2)*(x[0]**2 +x[1]**2 + x[2]**2))
    Hx[2, 0]    = x[0]/np.sqrt(x[0]**2 + x[1]**2 + x[2]**2)
    Hx[2, 1]    = x[1]/np.sqrt(x[0]**2 + x[1]**2 + x[2]**2)
    Hx[2, 2]    = x[2]/np.sqrt(x[0]**2 + x[1]**2 + x[2]**2)


    return Hx
        